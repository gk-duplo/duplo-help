name: Name for Persistent Volume Claim.
storageClassName: Storage Class Name for the Persistent Volume Claim to be created.
volumeName: Provide Volume Name to claim existing PV.
volumeMode: |
  Kubernetes supports two volumeModes of PersistentVolumes: `Filesystem` and `Block`.  
  Volume Mode is an optional API parameter. `Filesystem` is the default mode used when volumeMode parameter is omitted.  
  A volume with volumeMode: `Filesystem` is mounted into Pods into a directory. If the volume is backed by a block device and the device is empty, Kubernetes creates a filesystem on the device before mounting it for the first time.  
  You can set the value of volumeMode to `Block` to use a volume as a raw block device. Such volume is presented into a Pod as a block device, without any filesystem on it. This mode is useful to provide a Pod the fastest possible way to access a volume, without any filesystem layer between the Pod and the volume.  
accessModes: |
  A PersistentVolume can be mounted on a host in any way supported by the resource provider. As shown below, providers will have different capabilities and each PV's access modes are set to the specific modes supported by that particular volume. For example, NFS can support multiple read/write clients, but a specific NFS PV might be exported on the server as read-only. Each PV gets its own set of access modes describing that specific PV's capabilities.
  The access modes are:
  1. **ReadWriteOnce**
  the volume can be mounted as read-write by a single node. ReadWriteOnce access mode still can allow multiple pods to access the volume when the pods are running on the same node.
  2. **ReadOnlyMany**
  the volume can be mounted as read-only by many nodes.
  3. **ReadWriteMany**
  the volume can be mounted as read-write by many nodes.
  4. **ReadWriteOncePod**
  the volume can be mounted as read-write by a single Pod. Use ReadWriteOncePod access mode if you want to ensure that only one pod across whole cluster can read that PVC or write to it. This is only supported for CSI volumes and Kubernetes version 1.22+.
resources: |
  Claims, like Pods, can request specific quantities of a resource. In this case, the request is for storage. The same **[resource model]**(https://github.com/kubernetes/design-proposals-archive/blob/main/scheduling/resources.md) applies to both volumes and claims.
  Sample Value
  ```yml
  requests:
    storage: 10Gi
  ```
pvcAnnotations: |
  Kubernetes annotations in key value format. Sample value is like below
  ```yml
  key1: value1
  key2: value2
  ```
pvcLabels: |
  Kubernetes labels in key value format. Sample value is like below
  ```yml
  key1: value1
  key2: value2
  ```